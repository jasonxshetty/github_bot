import * as Path from "path";
import { RendererComponent } from "../components.js";
import { RendererEvent } from "../events.js";
import { writeFile } from "../../utils/index.js";
import { DefaultTheme } from "../themes/default/DefaultTheme.js";
import { gzip } from "zlib";
import { promisify } from "util";
const gzipP = promisify(gzip);
export class NavigationPlugin extends RendererComponent {
    constructor(owner) {
        super(owner);
        this.owner.on(RendererEvent.BEGIN, this.onRendererBegin.bind(this));
    }
    onRendererBegin(_event) {
        if (!(this.owner.theme instanceof DefaultTheme)) {
            return;
        }
        this.owner.preRenderAsyncJobs.push((event) => this.buildNavigationIndex(event));
    }
    async buildNavigationIndex(event) {
        const navigationJs = Path.join(event.outputDirectory, "assets", "navigation.js");
        const nav = this.owner.theme.getNavigation(event.project);
        const gz = await gzipP(Buffer.from(JSON.stringify(nav)));
        await writeFile(navigationJs, `window.navigationData = "data:application/octet-stream;base64,${gz.toString("base64")}"`);
    }
}
